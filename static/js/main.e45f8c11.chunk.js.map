{"version":3,"sources":["components/Searchbar/Searchbar.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Button/Button.jsx","components/Modal/Modal.jsx","App.js","index.js"],"names":["Searchbar","state","imageName","handleInputeChange","e","setState","target","value","onSubmit","preventDefault","props","reset","className","this","type","autoComplete","onChange","autoFocus","placeholder","Component","ImageGalleryItem","onClick","openlargeimage","src","alt","large","ImageGalary","pics","map","pic","webformatURL","largeImageURL","id","Button","handleKeyDown","code","toggleModal","handleClosing","overlay","document","querySelector","window","addEventListener","removeEventListener","App","useState","searchQuery","setSearchQuery","setPics","showModal","setShowModal","modalImage","setModalImage","showLoader","setShowLoader","currentPage","setCurrentPage","url","useEffect","setTimeout","axios","get","then","response","data","hits","length","prevState","alert","catch","error","finally","scrollTo","top","body","scrollHeight","behavior","query","link","dataset","color","height","width","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e45f8c11.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n\r\nexport default class Searchbar extends Component {\r\n  // static propTypes = {\r\n  //   onSubmit: PropTypes.func.isRequired,\r\n  // };\r\n\r\n  state = {\r\n    imageName:''\r\n  }\r\n  \r\n  handleInputeChange = e => {\r\n    this.setState({imageName:e.target.value})\r\n  }\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault()\r\n    this.props.onSubmit(\r\n      this.state.imageName\r\n    )\r\n    e.target.reset()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\">\r\n        <form className=\"SearchForm\" onSubmit={this.onSubmit}>\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            onChange={this.handleInputeChange}\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default class ImageGalleryItem extends Component {\r\n  static propTypes = {\r\n    src: PropTypes.string,\r\n    alt: PropTypes.string,\r\n    large: PropTypes.string,\r\n    openlargeimage: PropTypes.func,\r\n  }\r\n\r\n  state = {}\r\n\r\n  render() {\r\n    return (\r\n      <li className=\"ImageGalleryItem\">\r\n        <img\r\n          onClick={this.props.openlargeimage}\r\n          src={this.props.src}\r\n          alt={this.props.alt}\r\n          data-large={this.props.large}\r\n          className=\"ImageGalleryItem-image\"\r\n        />\r\n      </li>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport ImageGalleryItem from '../ImageGalleryItem/ImageGalleryItem'\r\n\r\nexport default class ImageGalary extends Component {\r\n  static propTypes = {\r\n    pics: PropTypes.array,\r\n    openlargeimage: PropTypes.func,\r\n  }\r\n\r\n  state = {}\r\n\r\n  render() {\r\n    return (\r\n      <ul className=\"ImageGallery\">\r\n        {this.props.pics.map((pic) => {\r\n          return (\r\n            <ImageGalleryItem\r\n              openlargeimage={this.props.openlargeimage}\r\n              key={pic.id}\r\n              src={pic.webformatURL}\r\n              alt={pic.webformatURL}\r\n              large={pic.largeImageURL}\r\n            />\r\n          )\r\n        })}\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Button extends Component {\r\n  static propTypes = {\r\n    onClick: PropTypes.func,\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"Button\"\r\n        type=\"button\"\r\n        onClick={this.props.onClick}\r\n      >\r\n        Load More\r\n      </button>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class ImageGalleryItem extends Component {\r\n  static propTypes = {\r\n    src: PropTypes.string,\r\n    toggleModal: PropTypes.func,\r\n  };\r\n\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.handleKeyDown);\r\n    window.addEventListener(\"click\", this.handleClosing);\r\n  }\r\n\r\n  handleKeyDown = (e) => {\r\n    if (e.code === \"Escape\") {\r\n      this.props.toggleModal();\r\n    }\r\n  };\r\n\r\n  handleClosing = (e) => {\r\n     const overlay=document.querySelector('.Overlay')\r\n    if (e.target===overlay) {\r\n      this.props.toggleModal();\r\n    }\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n    window.removeEventListener(\"click\", this.handleClosing);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Overlay\">\r\n        <div className=\"Modal\">\r\n          <img src={this.props.src} alt=\"\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import './App.css'\nimport { useState, useEffect } from 'react'\nimport Searchbar from './components/Searchbar/Searchbar'\nimport ImageGallery from './components/ImageGallery/ImageGallery'\nimport Button from './components/Button/Button'\nimport axios from 'axios'\nimport Loader from 'react-loader-spinner'\nimport Modal from './components/Modal/Modal'\n\nexport default function App() {\n  const [searchQuery, setSearchQuery] = useState(null)\n  const [pics, setPics] = useState([])\n  const [showModal, setShowModal] = useState(false)\n  const [modalImage, setModalImage] = useState('')\n  const [showLoader, setShowLoader] = useState(false)\n  const [currentPage, setCurrentPage] = useState(1)\n  const key = '23098764-6c28342abea29650d4f55356c'\n  let url = `https://pixabay.com/api/?q=${searchQuery}&page=${currentPage}&key=${key}&image_type=photo&orientation=horizontal&per_page=12`\n\n  useEffect(() => {\n    if (searchQuery === null) { return }\n    setShowLoader(true)\n    setTimeout(() => {\n      axios.get(url).then((response) => response.data.hits).then(pics => {\n        if (pics.length) {\n          setPics(prevState => (\n            [...prevState, ...pics]\n          ))\n        } else { alert(`${searchQuery} is not found`) }\n      }).catch(error => alert(error)).finally(() => setShowLoader(false))\n    }, 500)\n  }, [currentPage, searchQuery, url])\n\n  useEffect(() => {\n    window.scrollTo({\n      top: document.body.scrollHeight,\n      behavior: \"smooth\",\n    });\n  }, [pics]);\n\n\n\n  const saveInputeQuery = (query) => {\n    setSearchQuery(null)\n    setPics([])\n    setShowModal(false)\n    setModalImage('')\n    setShowLoader(false)\n    setSearchQuery(query)\n\n  }\n  const toggleModal = () => {\n    setShowModal(prevState => !prevState)\n  }\n\n  const loadMore = () => {\n    setCurrentPage(prevState => prevState + 1)\n  }\n\n  const modalOpener = (link) => {\n    setShowModal(!showModal)\n    return (\n      setModalImage(link)\n    )\n  }\n  return (\n    <div className=\"App\" >\n      <Searchbar onSubmit={saveInputeQuery} />\n      <ImageGallery\n        pics={pics}\n        openlargeimage={(e) =>\n          modalOpener(e.target.dataset.large)}\n      />\n      {showLoader && (\n        <Loader\n          className=\"spin\"\n          type=\"Bars\"\n          color=\"#00BFFF\"\n          height={80}\n          width={80}\n        />\n      )}\n      {pics.length &&\n        <Button onClick={loadMore} />}\n\n      {showModal && (\n        <Modal toggleModal={toggleModal}\n          src={modalImage} />\n      )}\n    </div>\n  )\n\n}\n\n// class OldApp {\n  // state = {\n  //   searchQuery: '',\n  //   pics: [],\n  //   showModal: false,\n  //   modalImage: '',\n  //   showLoader: false,\n  //   currentPage: 1,\n  // }\n\n  // loaderHandler() {\n  //   this.setState((prevState) => ({\n  //     showLoader: !prevState.showLoader,\n  //   }))\n  // }\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.searchQuery !== this.state.searchQuery) {\n  //     this.setState({ pics: [] })\n  //     this.getPics()\n  //   }\n  //   if (prevState.currentPage !== this.state.currentPage) {\n  //     this.getPics()\n  //   }\n  //   if (this.state.pics !== prevState.pics) {\n  //     window.scrollTo({\n  //       top: document.documentElement.scrollHeight,\n  //       behavior: \"smooth\",\n  //     });\n  //   }\n  // }\n  // getPics = () => {\n  //   this.setState({ showLoader: true })\n  //   const { searchQuery, currentPage } = this.state\n  //   const key = '23098764-6c28342abea29650d4f55356c'\n  //   let url = `https://pixabay.com/api/?q=${searchQuery}&page=${currentPage}&key=${key}&image_type=photo&orientation=horizontal&per_page=12`\n\n  //   setTimeout(() => {\n  //     axios.get(url).then((response) => response.data.hits).then(pics => {\n  //       if (pics.length) {\n  //         this.setState(prevState => ({\n  //           pics: [...prevState.pics, ...pics]\n  //         }))\n  //       } else { alert(`${this.state.searchQuery} is not found`) }\n  //     }).catch(error => alert(error)).finally(() => this.setState({ showLoader: false }))\n  //   }, 500)\n\n  // }\n\n  // toggleModal = () => {\n  //   this.setState({ showModal: !this.state.showModal })\n  // }\n\n  // saveInputeQuery = (query) => {\n  //   this.setState({\n  //     searchQuery: '',\n  //     pics: [],\n  //     showModal: false,\n  //     modalImage: '',\n  //     showLoader: false,\n  //     currentPage: 1,\n  //   })\n  //   this.setState({ searchQuery: query })\n\n  // }\n\n  // loadMore = () => {\n  //   this.setState({ currentPage: this.state.currentPage + 1 })\n  // }\n\n  // modalOpener(link) {\n  //   return this.setState({ modalPic: link, showModal: true })\n  // }\n  // render() {\n  //   return (\n  //     <div className=\"App\" >\n  //       <Searchbar onSubmit={this.saveInputeQuery} />\n  //       <ImageGallery\n  //         pics={this.state.pics}\n  //         openlargeimage={(e) =>\n  //           this.modalOpener(e.target.dataset.large)}\n  //       />\n  //       {this.state.showLoader && (\n  //         <Loader\n  //           className=\"spin\"\n  //           type=\"Bars\"\n  //           color=\"#00BFFF\"\n  //           height={80}\n  //           width={80}\n  //         />\n  //       )}\n  //       {this.state.pics.length &&\n  //         <Button onClick={this.loadMore} />}\n\n  //       {this.state.showModal && (\n  //         <Modal toggleModal={this.toggleModal}\n  //           src={this.state.modalPic} />\n  //       )}\n  //     </div>\n  //   )\n  // }\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}